Амартизационный анализ - метод подчета времени которые необходимо для последовательности операцмй над структурой даннных
последовательности. 
Амортизация нужна чтобы не было критической нагрузки
Амортизация - это распределение одинаковой нагрузки 
Усреднить, чтобы получить среднюю временную сложность

Амортизационный анализ - большинство операций выполняются быстро, а так очень медленно.

Зачем?
Например, чтобы показать, что хоть и существуют дорогие операции, то после усреднения по всем возможным операциям, средняя стоимость может быть низкой, из=за редкого выполнения дорогой операции.
Алгоритм должен работать так, чтобы было гарантированно много дешевых, после дорогих.

Амортизационный анализ применяют для Алгоритмов, которые запускаются несколько раз.
Оцениваем среднее или суммарное время.

Средняя амортизационная стоимость операций. 
t - время
n - совершенных операций над структурой даннных

Когда добавляем в массив элемент, массив всегда увеличивается. 
Массив должен быть всегда больше, чем в нем элементов. 
Из старого добавляем в новый.


статический и динамический массив. !!! узнать 

формулы. 
средняя амортизационная стоимость
два фактора - время и само кол-во операций. 

Динамические массивы.
Динамический массив - это массив, который автоматически увеличивается, когда мы пытаемся сделать вставку, когда для новго элемента не осталось места

Три особенности:
1) Добавить элемент. 
Индексируется с нуля. 
Вставка в конец - О(1)
Переместить элемент - вправо на одну позицию. 
Доступ по значению зависит от кол-во элементов. 

2)Удаление элементов 
По умолчанию удаляет элемент с конца
По определенному Индексируется

ArrayList

реализует интерфейс <List>
Инициализируется 


Используется для обраюотки наборов однородных данных, размер которых неизвестен

Зачем статический? 
равен О от одного. Многие данные туда помещаются и особо не нужна Амортизация

Лучше статический. Есть точный подсчет памяти


Логика динамического массива. Только это. Там нет статических. JS

!!!!! Компиляция, декларативный, итеративный стиль программирования. Блок схемы. 

элементы сдвигаются в лево, на один 

Start

Let arrayList = []

function elem(element) {
    arrayList.push(element)
}

end

console.log(arrayList)

var array = []

// Функция для добавления элемента в массив
function addElement(element) {
    // Добавляем элемент в конец массива
    array.push(element)
}

// Пример использования функции
start
    // Добавляем элементы в массив
    addElement(5)
    addElement(3)
    addElement(7)
    addElement(1)
    addElement(9)
    addElement(4)
begin

// Выводим результат
console.log(array)